


DB_JUMP(3)                                             DB_JUMP(3)


NNAAMMEE
       db_jump_set - replace underlying DB functionality

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ddbb..hh>>

       iinntt
       ddbb__jjuummpp__sseett((vvooiidd **ffuunncc,, iinntt wwhhiicchh));;

DDEESSCCRRIIPPTTIIOONN
       The  DB  library  is  a family of groups of functions that
       provides a modular programming interface  to  transactions
       and  record-oriented  file  access.   The library includes
       support for transactions, locking, logging and  file  page
       caching,  as well as various indexed access methods.  Many
       of the functional groups  (e.g.,  the  file  page  caching
       functions)  are  useful  independent of the other DB func-
       tions, although  some  functional  groups  are  explicitly
       based  on  other functional groups (e.g., transactions and
       logging).  For a general description of  the  DB  package,
       see _d_b___i_n_t_r_o(3).

  _d_b___j_u_m_p___s_e_t
       The  _d_b___j_u_m_p___s_e_t  function enables applications to replace
       underlying DB library functionality by  replacing  entries
       in  a function call jump table.  The _w_h_i_c_h argument speci-
       fies the entry to be replaced by the argument _f_u_n_c.

       The following values of _w_h_i_c_h are supported:

       DB_FUNC_CALLOC
            Replace all  DB  calls  to  the  ANSI  C  X3.159-1989
            (``ANSI  C'')  standard  _c_a_l_l_o_c  function  with _f_u_n_c,
            which must conform to the standard interface.

       DB_FUNC_CLOSE
            Replace all DB calls to  the  IEEE  Std  1003.1b-1993
            (``POSIX'')  standard _c_l_o_s_e function with _f_u_n_c, which
            must conform to the standard interface.

       DB_FUNC_DIRFREE
            The DB library requires the  ability  to  return  any
            memory  allocated  as part of the routine which reads
            through a directory and creates a list of files  that
            that  the  directory  contains (see DB_FUNC_DIRLIST).
            The _f_u_n_c  argument  must  conform  to  the  following
            interface:

                 int dirfree(char **namesp, int cnt);

            The  _n_a_m_e_s_p  and _c_n_t arguments are the same values as
            were returned by the DB_FUNC_DIRLIST function.

            The _d_i_r_f_r_e_e function returns the value  of  _e_r_r_n_o  on
            failure and 0 on success.

       DB_FUNC_DIRLIST
            The DB library requires the ability to read through a
            directory and create a list of files  that  that  the
            directory  contains.   The _f_u_n_c argument must conform
            to the following interface:

                 int dirlist(const char *dir,
                    char ***namesp, int *cntp);

            The _d_i_r argument is the name of the directory  to  be
            searched.   The  function must return a pointer to an
            array of nul-terminated  file  names  in  the  memory
            location  referenced  by  the  argument _n_a_m_e_s_p, and a
            count of the number of elements in the array  in  the
            memory location referenced by _c_n_t_p.

            The  _d_i_r_l_i_s_t  function  returns the value of _e_r_r_n_o on
            failure and 0 on success.

       DB_FUNC_EXISTS
            The DB library requires the ability to determine if a
            file  exists, and optionally, if it is a file of type
            directory.  The _f_u_n_c argument  must  conform  to  the
            following interface:

                 int exists(const char *path, int *isdirp);

            The  _p_a_t_h  argument is the pathname of the file to be
            checked.

            If the _i_s_d_i_r_p argument is non-NULL, it must be set to
            non-0  if _p_a_t_h is a directory, and 0 if _p_a_t_h is not a
            directory.

            The _e_x_i_s_t_s function returns the  value  of  _e_r_r_n_o  on
            failure and 0 on success.

       DB_FUNC_FREE
            Replace  all  DB  calls  to  the  ANSI  C X3.159-1989
            (``ANSI C'') standard _f_r_e_e function with _f_u_n_c,  which
            must conform to the standard interface.

       DB_FUNC_FSYNC
            Replace  all  DB  calls  to the IEEE Std 1003.1b-1993
            (``POSIX'') standard _f_s_y_n_c function with _f_u_n_c,  which
            must conform to the standard interface.

       DB_FUNC_IOINFO
            The  DB library requires the ability to determine the
            size and I/O characteristics of  a  file.   The  _f_u_n_c
            argument must conform to the following interface:

                 int ioinfo(const char *path,
                    int fd, off_t *sizep, off_t *iop);

            The  _p_a_t_h  argument is the pathname of the file to be
            checked, and the _f_d argument is an open file descrip-
            tor on the file.

            The  _i_o_i_n_f_o function must return the size of the file
            in the memory location referenced by the _s_i_z_e_p  argu-
            ment,  and the appropriate granularity for I/O opera-
            tions to the file in the memory  location  referenced
            by the _i_o_p argument.

            The  _i_o_i_n_f_o  function  returns  the value of _e_r_r_n_o on
            failure and 0 on success.

       DB_FUNC_MALLOC
            Replace all  DB  calls  to  the  ANSI  C  X3.159-1989
            (``ANSI  C'')  standard  _m_a_l_l_o_c  function  with _f_u_n_c,
            which must conform to the standard interface.

       DB_FUNC_MAP
            The DB library requires the ability  to  map  a  file
            into  memory.   The _f_u_n_c argument must conform to the
            following interface:

                 int map(int fd, size_t len,
                    int is_private, int rdonly, void **addr);

            The _f_d argument is an open  file  descriptor  on  the
            file.   The _m_a_p function must map the first _l_e_n bytes
            of the file into memory and return a pointer  to  the
            mapped location in the the memory location referenced
            by the argument _a_d_d_r.

            The _i_s___p_r_i_v_a_t_e argument will be non-zero if the  file
            is  private  to  the application, otherwise, the file
            must be mapped into shared memory accessible  to  any
            number of processes.

            The  _i_s___r_d_o_n_l_y  argument will be non-zero if the file
            is considered read-only by the caller.

            Both private and public files may contain semaphores.

            The  _m_a_p function returns the value of _e_r_r_n_o on fail-
            ure and 0 on success.

       DB_FUNC_OPEN
            Replace all DB calls to  the  IEEE  Std  1003.1b-1993
            (``POSIX'')  standard  _o_p_e_n function with _f_u_n_c, which
            must conform to the standard interface.


       DB_FUNC_READ
            Replace all DB calls to  the  IEEE  Std  1003.1b-1993
            (``POSIX'')  standard  _r_e_a_d function with _f_u_n_c, which
            must conform to the standard interface.

       DB_FUNC_REALLOC
            Replace all  DB  calls  to  the  ANSI  C  X3.159-1989
            (``ANSI  C'')  standard  _r_e_a_l_l_o_c  function with _f_u_n_c,
            which must conform to the standard interface.

       DB_FUNC_SEEK
            The DB library requires the ability to specify that a
            subsequent  read or write to a file will occur from a
            specific location in that file.   The  _f_u_n_c  argument
            must conform to the following interface:

                 int seek(int fd, size_t pgsize,
                    db_pgno_t pageno, u_long relative, int whence);

            The  _f_d  argument  is  an open file descriptor on the
            file.  The _s_e_e_k function must cause a subsequent read
            or  write  from  the  file  to occur at a byte offset
            specified by the calculation:

                 (pgsize * pageno) + relative


            The _w_h_e_n_c_e argument specifies where in the  file  the
            byte  offset  is  relative  to,  as  described by the
            Replace all DB calls to  the  IEEE  Std  1003.1b-1993
            (``POSIX'')  standard  _f_u_n_c_t_i_o_n _w_i_t_h _f_u_n_c, which must
            conform to the standard interface.
             for the _l_s_e_e_k system call.

            The _s_e_e_k function returns the value of _e_r_r_n_o on fail-
            ure and 0 on success.

       DB_FUNC_SLEEP
            The  DB  library requires the ability to cause a pro-
            cess to suspend itself for a period of  time,  relin-
            quishing  control of the processor to any other wait-
            ing thread of control.  The _f_u_n_c argument  must  con-
            form to the following interface:

                 int sleep(u_long seconds, u_long microseconds);

            The  _s_e_c_o_n_d_s  and  _m_i_c_r_o_s_e_c_o_n_d_s arguments specify the
            amount of time to wait until the suspending thread of
            control should run again.

            The  _s_e_c_o_n_d_s  and  _m_i_c_r_o_s_e_c_o_n_d_s  arguments may not be
            normalized when the _s_l_e_e_p function is  called,  i.e.,
            the   _m_i_c_r_o_s_e_c_o_n_d_s   argument  may  be  greater  than
            1000000.

            The _s_l_e_e_p function returns  the  value  of  _e_r_r_n_o  on
            failure and 0 on success.

       DB_FUNC_STRDUP
            Replace  all  DB  calls  to  the  ANSI  C X3.159-1989
            (``ANSI C'')  standard  _s_t_r_d_u_p  function  with  _f_u_n_c,
            which must conform to the standard interface.

       DB_FUNC_UNLINK
            Replace  all  DB  calls  to the IEEE Std 1003.1b-1993
            (``POSIX'') standard _u_n_l_i_n_k function with _f_u_n_c, which
            must conform to the standard interface.

       DB_FUNC_UNMAP
            The  DB  library requires the ability to unmap a file
            from memory.  The _f_u_n_c argument must conform  to  the
            following interface:

                 int unmap(void *addr, size_t len);

            The  _a_d_d_r  argument  is  the argument returned by the
            DB_FUNC_MAP function when the file  was  mapped  into
            memory,  and  the _l_e_n argument is the same as the _l_e_n
            argument specified to the DB_FUNC_MAP  function  when
            the file was mapped into memory.

            The  _u_n_m_a_p  function  returns  the  value of _e_r_r_n_o on
            failure and 0 on success.

       DB_FUNC_WRITE
            Replace all DB calls to  the  IEEE  Std  1003.1b-1993
            (``POSIX'')  standard _w_r_i_t_e function with _f_u_n_c, which
            must conform to the standard interface.

       DB_FUNC_YIELD
            The DB library requires the ability to yield the pro-
            cessor  from  the  current  thread  of control to any
            other waiting threads of control.  The _f_u_n_c  argument
            must conform to the following interface:

                 int yield(void);


            The   _y_i_e_l_d  function  must  be  able  to  cause  the
            rescheduling all participants in the current DB envi-
            ronment,  whether  threaded or not.  It may be incor-
            rect to supply a thread _y_i_e_l_d function if more than a
            single  process  is  operating in the DB environment.
            This is because many thread-yield functions will  not
            allow  other processes to run, and the contested lock
            may be  held  by  another  process,  not  by  another
            thread.

            If  no  _y_i_e_l_d  function is specified, or if the _y_i_e_l_d
            function returns an error, the function specified  by
            the  DB_FUNC_SLEEP entry will be used instead or sub-
            sequently, i.e., if no _y_i_e_l_d function  is  specified,
            or it is possible for the _y_i_e_l_d function to fail, the
            _s_l_e_e_p function mmuusstt cause the processor to reschedule
            any waiting threads of control for execution.

            SSoollaarriiss  aarrcchhiitteeccttuurree  nnoottee::  Because of bugs in ver-
            sions of Solaris before version 5.6, the  DB  library
            uses  the _s_e_m_a___w_a_i_t(3T) call instead of the _s_e_m_a___t_r_y_-
            _w_a_i_t(3T) call.  For this reason, replacing the  _y_i_e_l_d
            function will have no effect on Solaris.

            The  _y_i_e_l_d  function  returns  the  value of _e_r_r_n_o on
            failure and 0 on success.

       The _d_b___j_u_m_p___s_e_t function returns the  value  of  _e_r_r_n_o  on
       failure and 0 on success.

EERRRROORRSS
       The _d_b___j_u_m_p___s_e_t function may fail and return _e_r_r_n_o for the
       following conditions:

       [EINVAL]
            An invalid flag value or parameter was specified.

BBUUGGSS
       No type checking is done of the _f_u_n_c argument, and  speci-
       fying  an  invalid  replacement  routine will cause unpre-
       dictable results.

SSEEEE AALLSSOO
       _d_b___a_r_c_h_i_v_e(1), _d_b___c_h_e_c_k_p_o_i_n_t(1), _d_b___d_e_a_d_l_o_c_k(1), _d_b___d_u_m_p(1),
       _d_b___l_o_a_d(1), _d_b___r_e_c_o_v_e_r(1), _d_b___s_t_a_t(1), _d_b___i_n_t_r_o(3),
       _d_b___a_p_p_i_n_i_t(3), _d_b___c_u_r_s_o_r(3), _d_b___d_b_m(3), _d_b___j_u_m_p(3), _d_b___l_o_c_k(3),
       _d_b___l_o_g(3), _d_b___m_p_o_o_l(3), _d_b___o_p_e_n(3), _d_b___t_h_r_e_a_d(3), _d_b___t_x_n(3)
